

/*
 * 함수로 구성된 프로그래밍 기법
 * 데이터를 매개값으로 전달하고 결과를 받는 코드들로 구성
 * 객체지향 프로그래밍 보다 효율적인 경우
 * 	-대용량 데이터의 처리시에 유리
 * 		데이터 포장 객체를 생성후 처리하는 것 보다 데이터를 바로 처리하는 것이 속도에 유리
 * 		멀티 코어 CPU에서 데이터를 병렬 처리하고 취합할 때 객체보다는 함수가 유리
 * 이벤트 지향 프로그래밍(이벤트가 발생하면 핸드러 함수 실행)에 적합
 * 	- 반복적인 이벤트 처리는 핸들러 객체보다는 핸들러 함수가 적합
 * 
 * 현대적 기법
 * 	- 객체 지향 프로그램밍 + 함수적 프로그래밍
 * 
 * 
 * 자바8부텀 함수적 프로그램이 지원
 * 
 * 람다식을 언어 차원에서 제공
 * 	- 람다 계산법에서 사용된 식을 프로그래밍 언에 접목
 *  - 익명 함수을 생성하기 위한 식
 *  
 *  자바에서 람다식을 수용한 이유
 * 	  - 코드가 매우 간결해진다
 *    - 컬렉션 요소(대용량 데이터)를 필터링 또는 매핑해서 쉽게 집계할 수 있다
 *    
 *  타겟 타입(target type)
 *  람다식이 대입되는 인터페이스를 말한다
 *  익명 구현 객체를 만들 때 사용할 인터페이스이다
 *  
 *  함수적인 인터페이스
 *   모든 인터페이스는 람다식의 타켓 타입이 될 수 없다
 *     람다식은 하나의 메소드를 저으이하기 때문에
 *     하나의 추상 메소드만 선언된 인터페이스만 타켓 타입이 될 수 있음
 *   함수적 인터페이스
 *     하나의 추상 메소드만 선언된 인터페이스를 말한다
 *   @FunctionalInterface 어노테이션
 *     하나의 추상 메소드만을 가지는지 컴파일러가 체크 하도록함
 *     두 개 이상의 추상 메소드가 선언되어 있으면 컴파일 오류 발생
 *     
 * */
public class Lamda {

	public static void main(String[] args) {
		
	}

}
